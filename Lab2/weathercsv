# -*- coding: utf-8 -*-

import logging
import argparse
import csv
from datetime import datetime, timedelta
import os

logging.basicConfig(level=logging.INFO)


def read_csv(file_path: str) -> tuple:
    '''
    This function reads a CSV file
    :param file_path:
    :return tuple(header: list(str), data: list(str)):
    '''
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            header = next(reader)
            data = list(reader)
        return header, data
    except Exception as e:
        logging.exception(f"Can't read data: {e}\n{e.args}\n")


def write_csv(file_path: str, header: list, data: list) -> None:
    '''
    This function writes a CSV file
    :param file_path:
    :param header:
    :param data:
    :return:
    '''
    try:
        with open(file_path, 'w', encoding='utf-8', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(header)
            writer.writerows(data)
    except Exception as e:
        logging.exception(f"Can't write data: {e}\n{e.args}\n")

def split_csv_by_columns(input_file: str, output_file_x: str, output_file_y: str) -> None:
    '''
    This function writes a CSV file separated by columns.
    :param input_file:
    :param output_file_x:
    :param output_file_y:
    :return:
    '''
    try:
        dir_name_x = os.path.dirname(output_file_x)
        dir_name_y = os.path.dirname(output_file_y)
        os.makedirs(dir_name_x, exist_ok=True)
        os.makedirs(dir_name_y, exist_ok=True)
        header, data = read_csv(input_file)
        x_data = [[row[0]] for row in data]
        y_data = [[t for t in row[1:]] for row in data]
        write_csv(output_file_x, [header[0]], x_data)
        write_csv(output_file_y, [*header[1:]], y_data)
    except Exception as e:
        logging.exception(f"Can't split scv by columns: {e}\n{e.args}\n")